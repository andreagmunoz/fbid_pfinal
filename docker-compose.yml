version: '3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - docker_network
    restart: always

  kafka:
    image: wurstmeister/kafka:2.12-2.3.0
    container_name: kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "flight-delay-ml-request:1:1"
    ports:
    - "9092:9092"  # Exponer el puerto para acceso externo
    networks:
      - docker_network
    restart: always
    volumes:
      - ./kafka:/kafka-scripts
    depends_on:
    - zookeeper
    entrypoint: ["/kafka-scripts/create_topics.sh"]

  mongo:  
    image: mongo:7.0.17  
    container_name: mongodb
    ports:  
      - "27017:27017"  
    volumes:  
      - mongodb_data:/data/db  # Persistencia de datos de la base de datos si se borra el contenedor
      - ./mongo/init:/docker-entrypoint-initdb.d/  # inicializacion la primera vez - ejecuta import_distances.sh
    environment:  
      - MONGO_INITDB_DATABASE=agile_data_science 
    networks:
      - docker_network
      
  flask:
    build:
      context: ./flask
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - PROJECT_HOME=/flask_container
    volumes:
      - ./flask:/flask_container
    command: >
      bash -c "
      cd /flask_container/web &&
      python3 predict_flask.py" 
    networks:
      - docker_network

  proxy:
    image: node:18-alpine
    container_name: proxy
    command: "node /client/node.js"
    ports: 
      - "3000:3000"
    volumes:
     - ./proxy/client:/client
    networks:
      - docker_network

  #Spark Master
  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    depends_on:
      - proxy
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    volumes:
      - ./spark:/spark/base
      - spark-checkpoint:/checkpoint
    networks:
      - docker_network

    #Spark Worker 1
  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    volumes:
      - ./spark:/spark/base
      - spark-checkpoint:/checkpoint
    networks:
      - docker_network
    

  #Spark Worker 2
  spark-worker-2:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    volumes:
      - ./spark:/spark/base
      - spark-checkpoint:/checkpoint
    networks:
      - docker_network    

  spark-submit:
    build: ./spark
    container_name: spark-submit
    depends_on:
      - spark-master
      - spark-worker-1
      - spark-worker-2
    ports:
      - "4040:4040"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - "SERVER=proxy"
    volumes:
      - ./spark:/spark/base
      - spark-checkpoint:/checkpoint
    command: >
      bash -c "sleep 15; /spark/bin/spark-submit --class es.upm.dit.ging.predictor.MakePrediction --master spark://spark-master:7077 --packages org.mongodb.spark:mongo-spark-connector_2.12:10.1.1,org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.0 /spark/base/flight_prediction/target/scala-2.12/flight_prediction_2.12-0.1.jar"
    networks:
      - docker_network
volumes:  
  mongodb_data:
  spark-checkpoint:

networks:
   docker_network:
      driver: "bridge"
      name: "docker_network" 